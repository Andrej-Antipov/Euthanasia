#!/bin/bash


clear && printf '\e[3J' && printf '\033[0;0H'

osascript -e "tell application \"Terminal\" to set the font size of window 1 to 12"
osascript -e "tell application \"Terminal\" to set background color of window 1 to {1028, 12850, 10240}"
osascript -e "tell application \"Terminal\" to set normal text color of window 1 to {65535, 65535, 65535}"

MyTTY=`tty | tr -d " dev/\n"`
term=`ps`;  MyTTYcount=`echo $term | grep -Eo $MyTTY | wc -l | tr - " \t\n"`

lines=24
printf '\e[8;'${lines}';80t' && printf '\e[3J' && printf "\033[0;0H"

printf "\033[?25l"

if [[ $loc = "ru" ]]; then
printf '\e[2m****************** \e[0m\e[36mПрограмма управления сервисом Euthanasia\e[0m\e[2m *******************\e[0m\n'
else
printf '\e[2m****************** \e[0m\e[36m Euthanasia Service Management Program  \e[0m\e[2m *******************\e[0m\n'
fi

cd "$(dirname "$0")"; ROOT="$(dirname "$0")"

if [[ ! -d ~/Library/LaunchAgents ]]; then mkdir ~/Library/LaunchAgents; fi

loc=`defaults read -g AppleLocale | cut -d "_" -f1`
if [[ ! $loc = "ru" ]]; then loc="en"; fi 

CHECK_TTY_COUNT(){
term=`ps`
AllTTYcount=`echo $term | grep -Eo ttys[0-9][0-9][0-9] | wc -l | tr - " \t\n"`
let "TTYcount=AllTTYcount-MyTTYcount"
}

EXIT_PROGRAM(){
################################## очистка на выходе #############################################################
if [[ -f ~/.bash_history ]]; then cat  ~/.bash_history | sed -n '/Sleeper/!p' >> ~/new_hist.txt; rm ~/.bash_history; mv ~/new_hist.txt ~/.bash_history ; fi
if [[ -f ~/.zsh_history ]]; then cat  ~/.zsh_history | sed -n '/Sleeper/!p' >> ~/new_hist.txt; rm ~/.zsh_history; mv ~/new_hist.txt ~/.zsh_history ; fi
#####################################################################################################################
CHECK_TTY_COUNT	

kill $(ps  | grep -v grep | grep Euthanasia | rev | awk '{print $NF}' | rev)  2>/dev/null & 
if [[ ${TTYcount} = 0  ]];then  osascript -e 'tell application "Terminal" to close (every window whose name contains "Sleeper")' && osascript -e 'quit app "terminal.app"' & exit
else
   osascript -e 'tell application "Terminal" to close (every window whose name contains "Sleeper")' & exit
 fi

}

GET_APP_ICON(){
icon_string=""
if [[ -f AppIcon.icns ]]; then 
   icon_string=' with icon file "'"$(echo "$(diskutil info $(df / | tail -1 | cut -d' ' -f 1 ) |  grep "Volume Name:" | cut -d':'  -f 2 | xargs)")"''"$(echo "${ROOT}" | tr "/" ":" | xargs)"':AppIcon.icns"'
fi 
}


DISPLAY_NOTIFICATION(){
"${ROOT}"/tools/terminal-notifier.app/Contents/MacOS/terminal-notifier -title "Euthanasia" -sound Submarine -subtitle "${SUBTITLE}" -message "${MESSAGE}"
}

GET_USER_PASSWORD(){
mypassword="0"
if (security find-generic-password -a ${USER} -s euthanasia -w) >/dev/null 2>&1; then
                mypassword=$(security find-generic-password -a ${USER} -s euthanasia -w)
fi
}

ENTER_PASSWORD(){

mypassword="0"
if (security find-generic-password -a ${USER} -s euthanasia -w) >/dev/null 2>&1; then
                if [[ ! "$1" = "force" ]]; then
                mypassword=$(security find-generic-password -a ${USER} -s euthanasia -w)
                else
                security delete-generic-password -a ${USER} -s euthanasia >/dev/null 2>&1
                        if [[ $loc = "ru" ]]; then
                        SUBTITLE="НЕВЕРНЫЙ ПАРОЛЬ УДАЛЁН ИЗ КЛЮЧЕЙ !"; MESSAGE="Подключение разделов EFI НЕ работает"
                        else
                        SUBTITLE="WRONG PASSWORD REMOVED FROM KEYCHAIN !"; MESSAGE="Mount EFI Partitions NOT Available"
                        fi
                        DISPLAY_NOTIFICATION 
                fi
fi

if [[ "$mypassword" = "0" ]] || [[ "$1" = "force" ]]; then
  if [[ $flag = 1 ]]; then 
        
        TRY=3; GET_APP_ICON
        while [[ ! $TRY = 0 ]]; do
        if [[ $loc = "ru" ]]; then
        if PASSWORD="$(osascript -e 'Tell application "System Events" to display dialog "       Пароль для сервиса сна: " '"${icon_string}"' with hidden answer  default answer ""' -e 'text returned of result')"; then cansel=0; else cansel=1; fi 2>/dev/null
        else
        if PASSWORD="$(osascript -e 'Tell application "System Events" to display dialog "       Enter the password for sleep service: " '"${icon_string}"' with hidden answer  default answer ""' -e 'text returned of result')"; then cansel=0; else cansel=1; fi 2>/dev/null
        fi      
                if [[ $cansel = 1 ]]; then break; fi  
                mypassword="${PASSWORD}" 
                if [[ $mypassword = "" ]]; then mypassword="?"; fi

                if echo "${mypassword}" | sudo -Sk printf '' 2>/dev/null; then
                    security add-generic-password -a ${USER} -s euthanasia -w "${mypassword}" >/dev/null 2>&1
                        if [[ $loc = "ru" ]]; then
                        SUBTITLE="ПАРОЛЬ СОХРАНЁН В СВЯЗКЕ КЛЮЧЕЙ !"; MESSAGE=""
                        else
                        SUBTITLE="PASSWORD KEEPED IN KEYCHAIN !"; MESSAGE=""
                        fi
                        DISPLAY_NOTIFICATION
                        break
                else
                        let "TRY--"
                        if [[ ! $TRY = 0 ]]; then 
                            if [[ $loc = "ru" ]]; then
                        if [[ $TRY = 2 ]]; then ATTEMPT="ПОПЫТКИ"; LAST="ОСТАЛОСЬ"; fi
                        if [[ $TRY = 1 ]]; then ATTEMPT="ПОПЫТКА"; LAST="ОСТАЛАСЬ"; fi
                        SUBTITLE="НЕВЕРНЫЙ ПАРОЛЬ. $LAST $TRY $ATTEMPT !"; MESSAGE="Для сервиса сна нужен пароль"
                            else
                        if [[ $TRY = 2 ]]; then ATTEMPT="ATTEMPTS"; fi
                        if [[ $TRY = 1 ]]; then ATTEMPT="ATTEMPT"; fi
                        SUBTITLE="INCORRECT PASSWORD. LEFT $TRY $ATTEMPT !"; MESSAGE="Password required for sleep service"
                            fi
                DISPLAY_NOTIFICATION
                fi
                fi
            done
            mypassword="0"
if (security find-generic-password -a ${USER} -s euthanasia -w) >/dev/null 2>&1; then
                mypassword=$(security find-generic-password -a ${USER} -s euthanasia -w); 
fi
            if [[ "$mypassword" = "0" ]]; then
                    if [[ $loc = "ru" ]]; then
               SUBTITLE="ПАРОЛЬ НЕ ПОЛУЧЕН !"; MESSAGE=""
                    else
               SUBTITLE="PASSWORD NOT KEEPED IN KEYCHAIN !"; MESSAGE=""
                    fi
                DISPLAY_NOTIFICATION
                
        fi
    fi
fi
}

CLEAR_PLACE(){

                    printf "\033[H"
                    printf "\033['$free_lines';0f"
                    printf ' %.0s' {1..80}
                    printf ' %.0s' {1..80}
                    printf ' %.0s' {1..80}
                    printf ' %.0s' {1..80}
                    printf ' %.0s' {1..80}
                    printf ' %.0s' {1..80}
                    printf ' %.0s' {1..80}
                    printf ' %.0s' {1..80}
                    printf ' %.0s' {1..80}
                    printf '\r\033[9A'

}

SET_INPUT(){

if [[ -f ~/Library/Preferences/com.apple.HIToolbox.plist ]]; then
    declare -a layouts_names
    layouts=$(defaults read ~/Library/Preferences/com.apple.HIToolbox.plist AppleInputSourceHistory | egrep -w 'KeyboardLayout Name' | sed -E 's/.+ = "?([^"]+)"?;/\1/' | tr  '\n' ';')
    IFS=";"; layouts_names=($layouts); unset IFS; num=${#layouts_names[@]}
    keyboard="0"

    for ((i=0;i<$num;i++)); do
        case ${layouts_names[i]} in
    "ABC"                ) keyboard=${layouts_names[i]}; break ;;
    "US Extended"        ) keyboard="USExtended"; break ;;
    "USInternational-PC" ) keyboard=${layouts_names[i]}; break ;;
    "U.S."               ) keyboard="US"; break ;;
    "British"            ) keyboard=${layouts_names[i]}; break ;;
    "British-PC"         ) keyboard=${layouts_names[i]}; break ;;
    esac 
    done

    if [[ ! $i = 0 ]]; then 
       cd "$(dirname "$0")"
        if [[ ! $keyboard = "0" ]] && [[ -f "tools/xkbswitch" ]]; then tools/xkbswitch -se $keyboard; fi
            
    fi
     
fi

}

GET_INPUT(){
unset inputs
old_rs_lan="${rs_lan}"
SET_INPUT
while [[ ! ${inputs} =~ ^[0-4qQa]+$ ]]; do
printf "\033[?25l"
if [[ $loc = "ru" ]]; then             
printf '  Введите символ от \e[1;33m1\e[0m до \e[1;36m4\e[0m, (или \e[1;35mQ\e[0m - выход ):   ' ; printf '                             '
else
printf '  Enter a number from \e[1;33m1\e[0m to \e[1;36m4\e[0m, (or \e[1;35mQ\e[0m - exit ):  ' ; printf '                            '
fi			
printf "%"80"s"'\n'"%"80"s"'\n'"%"80"s"'\n'"%"80"s"
printf "\033[4A"
printf "\r\033[46C"
printf "\033[?25h"
CHECK_Euthanasia 2>/dev/null
if [[ "${rs_lan}" = "${old_rs_lan}" ]]; then
read -rsn1 -t2 inputs
else 
old_rs_lan="${rs_lan}"; inputs=0
fi 
printf "\r"
done
printf "\033[?25l"

}

CHECK_Euthanasia(){

if [[ $loc = "ru" ]]; then
if [[ $( echo "${mypassword}" | sudo -S launchctl list | grep "Euthanasia.job" | cut -f3 | grep -x "Euthanasia.job" ) ]]; then  rs_lan="работает"
        else
if [[ ! -f /System/Library/LaunchDaemons/Euthanasia.plist ]]; then rs_lan="не установлен"
            else
                 rs_lan="остановлен"
        fi 
fi
else
if [[ $(echo "${mypassword}" | sudo -S launchctl list | grep "Euthanasia.job" | cut -f3 | grep -x "Euthanasia.job" ) ]]; then  rs_lan="started" 
        else
if [[ ! -f /System/Library/LaunchDaemons/Euthanasia.plist ]]; then rs_lan="not installed"
            else
                 rs_lan="stopped"
        fi
fi
fi
}

SHOW_MENU(){

CHECK_Euthanasia 2>/dev/null

free_lines=16

printf '\e[8;'${lines}';80t' && printf '\e[3J' && printf "\033[0;0H"
if [[ $loc = "ru" ]]; then
printf '\e[2m****************** \e[0m\e[36mПрограмма управления сервисом Euthanasia\e[0m\e[2m *******************\e[0m\n'
else
printf '\e[2m****************** \e[0m\e[36m Euthanasia Service Management Program  \e[0m\e[2m *******************\e[0m\n'
fi
printf ' %.0s' {1..80}
printf '.%.0s' {1..80}
printf ' %.0s' {1..80}
if [[ $loc = "ru" ]]; then
        if [[ $rs_lan = "работает" ]]; then
        printf '               \e[1;32m           Сервис \e[0mEuthanasia  \e[1;32m'"$rs_lan"'\e[0m                \n'
        else
        printf '               \e[1;33m           Сервис \e[0mEuthanasia  \e[1;33m'"$rs_lan"'\e[0m                \n'
        fi
else
        if [[ $rs_lan = "started" ]]; then
        printf '               \e[1;32m           Service \e[0mEuthanasia  \e[1;32m'"$rs_lan"'\e[0m               \n'
        else
        printf '               \e[1;33m           Service \e[0mEuthanasia  \e[1;33m'"$rs_lan"'\e[0m               \n'
        fi
fi
printf ' %.0s' {1..80}
printf '.%.0s' {1..80}
printf '\n'
printf ' %.0s' {1..80}
if [[ $loc = "ru" ]]; then
    printf '          \e[1;33m1.\e[0m Установить сервис Euthanasia                \n'
    printf '          \e[1;33m2.\e[0m Остановить сервис                  \n'
    printf '          \e[1;33m3.\e[0m Запустить сервис                \n'
    printf '          \e[1;33m4.\e[0m Удалить сервис Euthanasia                   \n' 
    printf '          \e[1;35mQ.\e[0m Выйти из программы настройки       \n'
else
    printf '          \e[1;33m1.\e[0m Install Euthanasia service                  \n'
    printf '          \e[1;33m2.\e[0m Stop the service                            \n'
    printf '          \e[1;33m3.\e[0m Start the service                           \n'
    printf '          \e[1;33m4.\e[0m Remove Euthanasia service                   \n'
    printf '          \e[1;35mQ.\e[0m Exit the program                   \n'
fi
printf ' %.0s' {1..80}
}

MESSAGE_START(){
        if [[ $loc = "ru" ]]; then
        SUBTITLE="Сервис усыпления компа ЗАПУЩЕН "
        MESSAGE=" "
        DISPLAY_NOTIFICATION &
        else
        SUBTITLE="Service Euthanasia STARTED"
        MESSAGE=" "
        DISPLAY_NOTIFICATION &
        fi
DISPLAY_NOTIFICATION
}

MESSAGE_STOP(){
        if [[ $loc = "ru" ]]; then
        SUBTITLE="Сервис усыпления компа ОСТАНОВЛЕН "
        MESSAGE=" "
        DISPLAY_NOTIFICATION &
        else
        SUBTITLE="Service Euthanasia STOPPED"
        MESSAGE=" "
        DISPLAY_NOTIFICATION &
        fi
}


######################################## MAIN ##########################################################################################

# INIT

macos=`sw_vers -productVersion`
macos=`echo ${macos//[^0-9]/}`
macos=${macos:0:4}

flag=1

free_lines=7
var4=0
while [[ ! $var4 = 1 ]] 
do
printf '\e[3J' && printf "\033[0;0H" 
printf "\033[?25l"
SHOW_MENU
osascript -e 'tell application "Terminal" to activate'
#SET_INPUT
ENTER_PASSWORD
GET_INPUT

if [[ "$macos" = "1015" ]]; then sudo mount -uw / ; fi

if [[ $inputs = 0 ]]; then
            CLEAR_PLACE
            CHECK_Euthanasia
fi

if [[ $inputs = 1 ]]; then
            CLEAR_PLACE
            CHECK_Euthanasia
if [[ ! "${mypassword}" = "0" ]]; then 
                if [[ $loc = "ru" ]]; then
            if [[ ! $rs_lan = "остановлен" ]] || [[ ! $rs_lan = "работает" ]]; then
            if [[ -f tools/Euthanasia.plist ]] && [[ -f tools/Euthanasia.sh ]]; then
                if [[ ! -f /System/Library/LaunchDaemons/Euthanasia.plist ]]; then sudo cp -a tools/Euthanasia.plist /System/Library/LaunchDaemons; fi 2>/dev/null
                sudo chown root:wheel /System/Library/LaunchDaemons/Euthanasia.plist 2>/dev/null
                sudo chmod 755 /System/Library/LaunchDaemons/Euthanasia.plist 2>/dev/null
                sudo plutil -remove ProgramArguments.0 /System/Library/LaunchDaemons/Euthanasia.plist 2>/dev/null
                sudo plutil -insert ProgramArguments.0 -string "/Users/$(whoami)/Library/Application Support/Euthanasia/.Euthanasia.sh" /System/Library/LaunchDaemons/Euthanasia.plist 2>/dev/null
                if [[ ! -d ~/Library/Application\ Support/Euthanasia ]]; then mkdir ~/Library/Application\ Support/Euthanasia ; fi
#               cp -a tools/terminal-notifier.app ~/Library/Application\ Support/Euthanasia
                if [[ ! -f ~/Library/Application\ Support/Euthanasia/.Euthanasia.sh ]]; then cp -a tools/Euthanasia.sh ~/Library/Application\ Support/Euthanasia/.Euthanasia.sh; sudo chmod u+x ~/Library/Application\ Support/Euthanasia/.Euthanasia.sh; fi 2>/dev/null
                if [[ ! $rs_lan = "работает" ]]; then sudo launchctl load -w /System/Library/LaunchDaemons/Euthanasia.plist; fi 2>/dev/null
                if [[ $( echo "${mypassword}" | sudo -S launchctl list | grep "Euthanasia.job" | cut -f3 | grep -x "Euthanasia.job" ) ]]; then MESSAGE_START; fi  2>/dev/null
                cp AppIcon.icns ~/Library/Application\ Support/Euthanasia/.EuthIcon.icns; echo "ru" >> ~/Library/Application\ Support/Euthanasia/.SleeperLang.txt
                if [[ -f tools/RestartEuthanasia.sh ]]; then 
                    cp tools/RestartEuthanasia.sh ~/Library/Application\ Support/Euthanasia/RestartEuthanasia.sh
                    cp tools/RestartEuthanasia.plist ~/Library/LaunchAgents/RestartEuthanasia.plist
                    plutil -remove ProgramArguments.0 ~/Library/LaunchAgents/RestartEuthanasia.plist 2>/dev/null
                    plutil -insert ProgramArguments.0 -string "/Users/$(whoami)/Library/Application Support/Euthanasia/RestartEuthanasia.sh" ~/Library/LaunchAgents/RestartEuthanasia.plist 2>/dev/null
                    launchctl load -w ~/Library/LaunchAgents/RestartEuthanasia.plist 2>/dev/null
                fi
           else
                printf '\n   Не найдены файлы для установки. Поместите их в папку tools с установщиком\n'
                printf '\n'
        
          fi
    fi
            
 else
            if [[ ! $rs_lan = "stopped" ]] || [[ ! $rs_lan = "started" ]]; then
            if [[ -f tools/Euthanasia.plist ]] && [[ -f tools/Euthanasia.sh ]]; then
                if [[ ! -f /System/Library/LaunchDaemons/Euthanasia.plist ]]; then sudo cp -a tools/Euthanasia.plist /System/Library/LaunchDaemons; fi 2>/dev/null
                sudo chown root:wheel /System/Library/LaunchDaemons/Euthanasia.plist 2>/dev/null
                sudo chmod 755 /System/Library/LaunchDaemons/Euthanasia.plist 2>/dev/null
                sudo plutil -remove ProgramArguments.0 /System/Library/LaunchDaemons/Euthanasia.plist 2>/dev/null
                sudo plutil -insert ProgramArguments.0 -string "/Users/$(whoami)/.Euthanasia.sh" /System/Library/LaunchDaemons/Euthanasia.plist 2>/dev/null
                if [[ ! -d ~/Library/Application\ Support/Euthanasia ]]; then mkdir ~/Library/Application\ Support/Euthanasia ; fi
                if [[ ! -f ~/Library/Application\ Support/Euthanasia/.Euthanasia.sh ]]; then cp -a tools/Euthanasia.sh ~/Library/Application\ Support/Euthanasia/.Euthanasia.sh; sudo chmod u+x ~/Library/Application\ Support/Euthanasia/.Euthanasia.sh; fi 2>/dev/null
                if [[ ! $rs_lan = "started" ]]; then sudo launchctl load -w /System/Library/LaunchDaemons/Euthanasia.plist; fi 2>/dev/null
                if [[ $( echo "${mypassword}" | sudo -S launchctl list | grep "Euthanasia.job" | cut -f3 | grep -x "Euthanasia.job" ) ]]; then MESSAGE_START; fi  2>/dev/null
                cp AppIcon.icns ~/Library/Application\ Support/Euthanasia/.EuthIcon.icns; echo "en" >> ~/Library/Application\ Support/Euthanasia/.SleeperLang.txt
                if [[ -f tools/RestartEuthanasia.sh ]]; then 
                    cp tools/RestartEuthanasia.sh ~/Library/Application\ Support/Euthanasia/RestartEuthanasia.sh
                    cp tools/RestartEuthanasia.plist ~/Library/LaunchAgents/RestartEuthanasia.plist
                    plutil -remove ProgramArguments.0 ~/Library/LaunchAgents/RestartEuthanasia.plist 2>/dev/null
                    plutil -insert ProgramArguments.0 -string "/Users/$(whoami)/Library/Application Support/Euthanasia/RestartEuthanasia.sh" ~/Library/LaunchAgents/RestartEuthanasia.plist 2>/dev/null
                    launchctl load -w ~/Library/LaunchAgents/RestartEuthanasia.plist 2>/dev/null
                fi
           else
                printf '\n   No installation files found. Put them in the installer tools folder      \n'
                printf '\n'
        
          fi
        fi

    fi
 fi

read -n 1 -t 1
CLEAR_PLACE
fi


if [[ $inputs = 2 ]]; then
    CHECK_Euthanasia
    if [[ $loc = "ru" ]]; then
        if [[ $rs_lan = "работает" ]]; then
        if [[ -f /System/Library/LaunchDaemons/Euthanasia.plist ]]; then
            sudo launchctl unload -w /System/Library/LaunchDaemons/Euthanasia.plist; fi 2>/dev/null
            if [[ ! $( echo "${mypassword}" | sudo -S launchctl list | grep "Euthanasia.job" | cut -f3 | grep -x "Euthanasia.job" ) ]]; then MESSAGE_STOP; fi  2>/dev/null
        fi
    else
        if [[ $rs_lan = "started" ]]; then
        if [[ -f /System/Library/LaunchDaemons/Euthanasia.plist ]]; then
            sudo launchctl unload -w /System/Library/LaunchDaemons/Euthanasia.plist; fi 2>/dev/null
            if [[ ! $( echo "${mypassword}" | sudo -S launchctl list | grep "Euthanasia.job" | cut -f3 | grep -x "Euthanasia.job" ) ]]; then MESSAGE_STOP; fi  2>/dev/null
        fi
    fi
    CLEAR_PLACE
fi

if [[ $inputs = 3 ]]; then
     CHECK_Euthanasia
    if [[ $loc = "ru" ]]; then
        if [[ $rs_lan = "остановлен" ]]; then
        if [[ -f /System/Library/LaunchDaemons/Euthanasia.plist ]]; then
            sudo launchctl load -w /System/Library/LaunchDaemons/Euthanasia.plist; fi 2>/dev/null
            if [[ $( echo "${mypassword}" | sudo -S launchctl list | grep "Euthanasia.job" | cut -f3 | grep -x "Euthanasia.job" ) ]]; then MESSAGE_START; fi  2>/dev/null
        fi
     else
        if [[ $rs_lan = "stopped" ]]; then
        if [[ -f /System/Library/LaunchDaemons/Euthanasia.plist ]]; then
            sudo launchctl load -w /System/Library/LaunchDaemons/Euthanasia.plist; fi 2>/dev/null
            if [[ $( echo "${mypassword}" | sudo -S launchctl list | grep "Euthanasia.job" | cut -f3 | grep -x "Euthanasia.job" ) ]]; then MESSAGE_START; fi   2>/dev/null
        fi
    fi
    CLEAR_PLACE
fi

if [[ $inputs = 4 ]]; then
    CHECK_Euthanasia
    if [[ $(echo "${mypassword}" | sudo -S launchctl list | grep "Euthanasia.job" | cut -f3 | grep -x "Euthanasia.job") ]]; then sudo launchctl unload -w /System/Library/LaunchDaemons/Euthanasia.plist 2>/dev/null; fi
    if [[ ! $( echo "${mypassword}" | sudo -S launchctl list | grep "Euthanasia.job" | cut -f3 | grep -x "Euthanasia.job" ) ]]; then MESSAGE_STOP; fi  2>/dev/null
    if [[ -f /System/Library/LaunchDaemons/Euthanasia.plist ]]; then sudo rm -f /System/Library/LaunchDaemons/Euthanasia.plist; fi
    launchctl unload -w ~/Library/LaunchAgents/RestartEuthanasia.plist 2>/dev/null
    rm -f ~/Library/LaunchAgents/RestartEuthanasia.plist
    rm -Rf ~/Library/Application\ Support/Euthanasia
    read -n 1 -t 1
    CLEAR_PLACE
fi

if [[ $inputs = [qQ] ]]; then
    break
fi

done

clear

EXIT_PROGRAM






