#!/bin/bash

osascript -e 'tell application "Terminal" to set visible of (every window whose name contains "Sleeper") to false'

CHECK_TTY_COUNT(){
term=`ps`
AllTTYcount=`echo $term | grep -Eo ttys[0-9][0-9][0-9] | wc -l | tr - " \t\n"`
let "TTYcount=AllTTYcount-MyTTYcount"
}

EXIT_PROGRAM(){
################################## очистка на выходе #############################################################
if [[ -f ~/.bash_history ]]; then cat  ~/.bash_history | sed -n '/Sleeper/!p' >> ~/new_hist.txt; rm ~/.bash_history; mv ~/new_hist.txt ~/.bash_history ; fi
if [[ -f ~/.zsh_history ]]; then cat  ~/.zsh_history | sed -n '/Sleeper/!p' >> ~/new_hist.txt; rm ~/.zsh_history; mv ~/new_hist.txt ~/.zsh_history ; fi
#####################################################################################################################
CHECK_TTY_COUNT	

if [[ ${TTYcount} = 0  ]];then  osascript -e 'tell application "Terminal" to close (every window whose name contains "Sleeper")' && osascript -e 'quit app "terminal.app"' & exit
else
   osascript -e 'tell application "Terminal" to close (every window whose name contains "Sleeper")' & exit
 fi

}

GET_APP_ICON(){
icon_string=""
if [[ -f AppIcon.icns ]]; then 
   icon_string=' with icon file "'"$(echo "$(diskutil info $(df / | tail -1 | cut -d' ' -f 1 ) |  grep "Volume Name:" | cut -d':'  -f 2 | xargs)")"''"$(echo "${ROOT}" | tr "/" ":" | xargs)"':AppIcon.icns"'
fi 
}


DISPLAY_NOTIFICATION(){
"${ROOT}"/tools/terminal-notifier.app/Contents/MacOS/terminal-notifier -title "Euthanasia" -sound Submarine -subtitle "${SUBTITLE}" -message "${MESSAGE}"
}

GET_USER_PASSWORD(){
mypassword="0"
if (security find-generic-password -a ${USER} -s euthanasia -w) >/dev/null 2>&1; then
                mypassword=$(security find-generic-password -a ${USER} -s euthanasia -w)
fi
}

ENTER_PASSWORD(){

mypassword="0"
if (security find-generic-password -a ${USER} -s euthanasia -w) >/dev/null 2>&1; then
                if [[ ! "$1" = "force" ]]; then
                mypassword=$(security find-generic-password -a ${USER} -s euthanasia -w)
                else
                security delete-generic-password -a ${USER} -s euthanasia >/dev/null 2>&1
                        if [[ $loc = "ru" ]]; then
                        SUBTITLE="НЕВЕРНЫЙ ПАРОЛЬ УДАЛЁН ИЗ КЛЮЧЕЙ !"; MESSAGE="Подключение разделов EFI НЕ работает"
                        else
                        SUBTITLE="WRONG PASSWORD REMOVED FROM KEYCHAIN !"; MESSAGE="Mount EFI Partitions NOT Available"
                        fi
                        DISPLAY_NOTIFICATION 
                fi
fi

if [[ "$mypassword" = "0" ]] || [[ "$1" = "force" ]]; then
  if [[ $flag = 1 ]]; then 
        
        TRY=3; GET_APP_ICON
        while [[ ! $TRY = 0 ]]; do
        if [[ $loc = "ru" ]]; then
        if PASSWORD="$(osascript -e 'Tell application "System Events" to display dialog "       Пароль для сервиса сна: " '"${icon_string}"' with hidden answer  default answer ""' -e 'text returned of result')"; then cansel=0; else cansel=1; fi 2>/dev/null
        else
        if PASSWORD="$(osascript -e 'Tell application "System Events" to display dialog "       Enter the password for sleep service: " '"${icon_string}"' with hidden answer  default answer ""' -e 'text returned of result')"; then cansel=0; else cansel=1; fi 2>/dev/null
        fi      
                if [[ $cansel = 1 ]]; then break; fi  
                mypassword="${PASSWORD}" 
                if [[ $mypassword = "" ]]; then mypassword="?"; fi

                if echo "${mypassword}" | sudo -Sk printf '' 2>/dev/null; then
                    security add-generic-password -a ${USER} -s euthanasia -w "${mypassword}" >/dev/null 2>&1
                        if [[ $loc = "ru" ]]; then
                        SUBTITLE="ПАРОЛЬ СОХРАНЁН В СВЯЗКЕ КЛЮЧЕЙ !"; MESSAGE=""
                        else
                        SUBTITLE="PASSWORD KEEPED IN KEYCHAIN !"; MESSAGE=""
                        fi
                        DISPLAY_NOTIFICATION
                        break
                else
                        let "TRY--"
                        if [[ ! $TRY = 0 ]]; then 
                            if [[ $loc = "ru" ]]; then
                        if [[ $TRY = 2 ]]; then ATTEMPT="ПОПЫТКИ"; LAST="ОСТАЛОСЬ"; fi
                        if [[ $TRY = 1 ]]; then ATTEMPT="ПОПЫТКА"; LAST="ОСТАЛАСЬ"; fi
                        SUBTITLE="НЕВЕРНЫЙ ПАРОЛЬ. $LAST $TRY $ATTEMPT !"; MESSAGE="Для сервиса сна нужен пароль"
                            else
                        if [[ $TRY = 2 ]]; then ATTEMPT="ATTEMPTS"; fi
                        if [[ $TRY = 1 ]]; then ATTEMPT="ATTEMPT"; fi
                        SUBTITLE="INCORRECT PASSWORD. LEFT $TRY $ATTEMPT !"; MESSAGE="Password required for sleep service"
                            fi
                DISPLAY_NOTIFICATION
                fi
                fi
            done
            mypassword="0"
if (security find-generic-password -a ${USER} -s euthanasia -w) >/dev/null 2>&1; then
                mypassword=$(security find-generic-password -a ${USER} -s euthanasia -w); 
fi
            if [[ "$mypassword" = "0" ]]; then
                    if [[ $loc = "ru" ]]; then
               SUBTITLE="ПАРОЛЬ НЕ ПОЛУЧЕН !"; MESSAGE=""
                    else
               SUBTITLE="PASSWORD NOT KEEPED IN KEYCHAIN !"; MESSAGE=""
                    fi
                DISPLAY_NOTIFICATION
                
        fi
    fi
fi
}


SET_INPUT(){

if [[ -f ~/Library/Preferences/com.apple.HIToolbox.plist ]]; then
    declare -a layouts_names
    layouts=$(defaults read ~/Library/Preferences/com.apple.HIToolbox.plist AppleInputSourceHistory | egrep -w 'KeyboardLayout Name' | sed -E 's/.+ = "?([^"]+)"?;/\1/' | tr  '\n' ';')
    IFS=";"; layouts_names=($layouts); unset IFS; num=${#layouts_names[@]}
    keyboard="0"

    for ((i=0;i<$num;i++)); do
        case ${layouts_names[i]} in
    "ABC"                ) keyboard=${layouts_names[i]}; break ;;
    "US Extended"        ) keyboard="USExtended"; break ;;
    "USInternational-PC" ) keyboard=${layouts_names[i]}; break ;;
    "U.S."               ) keyboard="US"; break ;;
    "British"            ) keyboard=${layouts_names[i]}; break ;;
    "British-PC"         ) keyboard=${layouts_names[i]}; break ;;
    esac 
    done

    if [[ ! $i = 0 ]]; then 
       cd "$(dirname "$0")"
        if [[ ! $keyboard = "0" ]] && [[ -f "tools/xkbswitch" ]]; then tools/xkbswitch -se $keyboard; fi
            
    fi
     
fi

}

MESSAGE_START(){
        if [[ $loc = "ru" ]]; then
        SUBTITLE="Сервис усыпления компа ЗАПУЩЕН "
        MESSAGE=" "
        DISPLAY_NOTIFICATION &
        else
        SUBTITLE="Service Euthanasia STARTED"
        MESSAGE=" "
        DISPLAY_NOTIFICATION &
        fi
DISPLAY_NOTIFICATION
}

MESSAGE_STOP(){
        if [[ $loc = "ru" ]]; then
        SUBTITLE="Сервис усыпления компа ОСТАНОВЛЕН "
        MESSAGE=" "
        DISPLAY_NOTIFICATION 
        else
        SUBTITLE="Service Euthanasia STOPPED"
        MESSAGE=" "
        DISPLAY_NOTIFICATION 
        fi
}


######################################## MAIN ##########################################################################################

# INIT

MyTTY=`tty | tr -d " dev/\n"`
term=`ps`;  MyTTYcount=`echo $term | grep -Eo $MyTTY | wc -l | tr - " \t\n"`
cd "$(dirname "$0")"; ROOT="$(dirname "$0")"

if [[ ! -d ~/Library/LaunchAgents ]]; then mkdir ~/Library/LaunchAgents; fi

loc=`defaults read -g AppleLocale | cut -d "_" -f1`
if [[ ! $loc = "ru" ]]; then loc="en"; fi 

macos=`sw_vers -productVersion`
macos=`echo ${macos//[^0-9]/}`
macos=${macos:0:4}

SET_INPUT
flag=1
ENTER_PASSWORD
if [[ ! "${mypassword}" = "0" ]]; then 

           if [[ "$macos" = "1015" ]]; then sudo mount -uw / ; fi

           if [[ ! $( echo "${mypassword}" | sudo -S launchctl list | grep "Euthanasia.job" | cut -f3 | grep -x "Euthanasia.job" 2>/dev/null) ]]; then 

                sudo cp -a tools/Euthanasia.plist /System/Library/LaunchDaemons 2>/dev/null
                sudo chown root:wheel /System/Library/LaunchDaemons/Euthanasia.plist 2>/dev/null
                sudo chmod 755 /System/Library/LaunchDaemons/Euthanasia.plist 2>/dev/null
                sudo plutil -remove ProgramArguments.0 /System/Library/LaunchDaemons/Euthanasia.plist 2>/dev/null
                sudo plutil -insert ProgramArguments.0 -string "/Users/$(whoami)/Library/Application Support/Euthanasia/.Euthanasia.sh" /System/Library/LaunchDaemons/Euthanasia.plist 2>/dev/null
                if [[ ! -d ~/Library/Application\ Support/Euthanasia ]]; then mkdir ~/Library/Application\ Support/Euthanasia ; fi
                cp -a tools/Euthanasia.sh ~/Library/Application\ Support/Euthanasia/.Euthanasia.sh
                sudo chmod u+x ~/Library/Application\ Support/Euthanasia/.Euthanasia.sh 2>/dev/null
                sudo launchctl load -w /System/Library/LaunchDaemons/Euthanasia.plist 2>/dev/null
                if [[ $( echo "${mypassword}" | sudo -S launchctl list | grep "Euthanasia.job" | cut -f3 | grep -x "Euthanasia.job" ) ]]; then MESSAGE_START; fi  2>/dev/null
                cp AppIcon.icns ~/Library/Application\ Support/Euthanasia/.EuthIcon.icns; echo "ru" >> ~/Library/Application\ Support/Euthanasia/.SleeperLang.txt
                cp tools/RestartEuthanasia.sh ~/Library/Application\ Support/Euthanasia/RestartEuthanasia.sh
                cp tools/RestartEuthanasia.plist ~/Library/LaunchAgents/RestartEuthanasia.plist
                plutil -remove ProgramArguments.0 ~/Library/LaunchAgents/RestartEuthanasia.plist 2>/dev/null
                plutil -insert ProgramArguments.0 -string "/Users/$(whoami)/Library/Application Support/Euthanasia/RestartEuthanasia.sh" ~/Library/LaunchAgents/RestartEuthanasia.plist 2>/dev/null
                launchctl load -w ~/Library/LaunchAgents/RestartEuthanasia.plist 2>/dev/null

            else

               sudo launchctl unload -w /System/Library/LaunchDaemons/Euthanasia.plist 2>/dev/null
               sudo rm -f /System/Library/LaunchDaemons/Euthanasia.plist
               launchctl unload -w ~/Library/LaunchAgents/RestartEuthanasia.plist 2>/dev/null
               rm -f ~/Library/LaunchAgents/RestartEuthanasia.plist
               rm -Rf ~/Library/Application\ Support/Euthanasia
               MESSAGE_STOP
            fi

fi


EXIT_PROGRAM






